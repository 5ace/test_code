#include <fstream>
#include <iostream>
#include <regex>
#include <set>
#include <string>
#include <vector>
// gcc4.9以上
// https://www.ecma-international.org/publications-and-standards/standards/ecma-262/
// /home/distcc/gcc-8.3.0/bin/g++ -std=gnu++14 -static-libstdc++ regex.cc
const std::regex chinese(
    "([\u4e00-\u9fff]+[ \ta-zA-Z]{0,}(?!202[0-4])[0-9]{2,}[ "
    "\t]{0,}(部|层|次|课|集|颗|条|天|届|话|秒|页|号|路|名|届|期){0,})|(.*[0-9]{5,}.*)");
const std::regex juji(
    "[\u4e00-\u9fff]+[a-zA-Z \t]{0,}([0-9]{3,})[ "
    "\t]{0,}(\t| "
    "|部|层|次|课|集|颗|条|天|届|话|秒|页|号|路|名|届|期|元|台|辆|只){0,}|[^0-9]*([0-9]{4,})[^0-9]*");
const static std::set<std::string> recognize_number = {
    "0",     "00",    "000",   "001",   "01",    "1",     "002",   "02",    "2",     "003",   "03",
    "3",     "004",   "04",    "4",     "005",   "05",    "5",     "006",   "06",    "6",     "007",
    "07",    "7",     "008",   "08",    "8",     "009",   "09",    "9",     "010",   "10",    "011",
    "11",    "012",   "12",    "013",   "13",    "14",    "015",   "15",    "16",    "17",    "18",
    "019",   "19",    "0020",  "020",   "20",    "021",   "21",    "022",   "22",    "023",   "23",
    "024",   "24",    "025",   "25",    "26",    "027",   "27",    "028",   "28",    "029",   "29",
    "30",    "31",    "32",    "33",    "34",    "35",    "36",    "37",    "38",    "39",    "40",
    "41",    "42",    "43",    "44",    "45",    "46",    "47",    "48",    "49",    "050",   "50",
    "51",    "52",    "53",    "54",    "055",   "55",    "56",    "57",    "58",    "59",    "60",
    "061",   "61",    "62",    "63",    "64",    "65",    "66",    "67",    "68",    "69",    "70",
    "71",    "72",    "073",   "73",    "074",   "74",    "075",   "75",    "76",    "77",    "78",
    "79",    "080",   "80",    "81",    "82",    "83",    "84",    "85",    "86",    "87",    "88",
    "89",    "90",    "91",    "92",    "93",    "94",    "95",    "96",    "97",    "98",    "99",
    "100",   "101",   "102",   "103",   "104",   "105",   "106",   "107",   "108",   "109",   "110",
    "111",   "112",   "113",   "114",   "115",   "116",   "117",   "118",   "119",   "120",   "121",
    "122",   "123",   "124",   "125",   "126",   "127",   "128",   "129",   "130",   "131",   "132",
    "133",   "134",   "135",   "136",   "137",   "138",   "139",   "140",   "141",   "142",   "143",
    "144",   "145",   "146",   "147",   "148",   "149",   "150",   "151",   "152",   "153",   "154",
    "155",   "156",   "157",   "158",   "159",   "160",   "161",   "162",   "163",   "164",   "165",
    "166",   "167",   "168",   "169",   "170",   "171",   "172",   "173",   "174",   "175",   "176",
    "177",   "178",   "179",   "180",   "181",   "182",   "183",   "184",   "185",   "186",   "187",
    "188",   "189",   "190",   "191",   "192",   "193",   "194",   "195",   "196",   "197",   "198",
    "199",   "200",   "201",   "202",   "203",   "204",   "205",   "206",   "207",   "208",   "209",
    "210",   "211",   "212",   "213",   "214",   "215",   "216",   "217",   "218",   "219",   "220",
    "221",   "222",   "223",   "224",   "225",   "226",   "227",   "228",   "229",   "230",   "231",
    "232",   "233",   "234",   "235",   "236",   "237",   "238",   "239",   "240",   "241",   "242",
    "243",   "244",   "245",   "246",   "247",   "248",   "249",   "250",   "251",   "252",   "253",
    "254",   "255",   "256",   "257",   "258",   "259",   "260",   "261",   "262",   "263",   "264",
    "265",   "266",   "267",   "268",   "269",   "270",   "271",   "272",   "273",   "274",   "275",
    "276",   "277",   "278",   "279",   "280",   "281",   "282",   "283",   "284",   "285",   "286",
    "287",   "288",   "289",   "290",   "291",   "292",   "293",   "294",   "295",   "296",   "297",
    "298",   "299",   "300",   "301",   "302",   "303",   "304",   "305",   "306",   "307",   "308",
    "309",   "310",   "311",   "312",   "313",   "314",   "315",   "316",   "317",   "318",   "319",
    "320",   "321",   "322",   "323",   "324",   "325",   "326",   "327",   "328",   "329",   "330",
    "331",   "332",   "333",   "334",   "335",   "336",   "337",   "338",   "339",   "340",   "341",
    "342",   "343",   "344",   "345",   "346",   "347",   "348",   "349",   "350",   "351",   "352",
    "353",   "354",   "355",   "356",   "357",   "358",   "359",   "360",   "361",   "362",   "363",
    "364",   "365",   "366",   "367",   "368",   "369",   "370",   "371",   "372",   "373",   "374",
    "375",   "376",   "377",   "378",   "379",   "380",   "381",   "382",   "383",   "384",   "385",
    "386",   "387",   "388",   "389",   "390",   "391",   "392",   "393",   "394",   "395",   "396",
    "397",   "398",   "399",   "400",   "401",   "402",   "403",   "404",   "405",   "406",   "407",
    "408",   "409",   "410",   "411",   "412",   "413",   "414",   "415",   "416",   "417",   "418",
    "419",   "420",   "421",   "422",   "425",   "426",   "427",   "428",   "429",   "430",   "432",
    "433",   "435",   "438",   "440",   "441",   "442",   "444",   "445",   "448",   "450",   "451",
    "453",   "455",   "456",   "457",   "458",   "460",   "465",   "468",   "470",   "475",   "480",
    "485",   "486",   "488",   "490",   "495",   "498",   "499",   "500",   "501",   "502",   "503",
    "504",   "505",   "506",   "508",   "510",   "511",   "512",   "513",   "515",   "516",   "518",
    "520",   "521",   "522",   "525",   "530",   "536",   "539",   "540",   "543",   "550",   "555",
    "560",   "570",   "580",   "588",   "590",   "591",   "595",   "599",   "600",   "601",   "603",
    "610",   "611",   "616",   "618",   "620",   "625",   "626",   "630",   "640",   "650",   "660",
    "661",   "666",   "670",   "680",   "688",   "690",   "699",   "700",   "701",   "705",   "709",
    "710",   "711",   "720",   "730",   "737",   "740",   "747",   "750",   "0755",  "760",   "768",
    "770",   "777",   "780",   "787",   "790",   "798",   "799",   "0800",  "800",   "801",   "802",
    "810",   "814",   "816",   "818",   "820",   "828",   "830",   "835",   "838",   "840",   "850",
    "852",   "855",   "860",   "863",   "866",   "867",   "870",   "880",   "886",   "888",   "890",
    "897",   "899",   "900",   "911",   "920",   "921",   "925",   "930",   "950",   "960",   "970",
    "978",   "980",   "985",   "990",   "998",   "999",   "1000",  "1001",  "1010",  "1020",  "1024",
    "1080",  "1100",  "1111",  "1200",  "1234",  "1250",  "1280",  "1300",  "1350",  "1389",  "1400",
    "1500",  "1600",  "1700",  "1800",  "1840",  "1850",  "1860",  "1867",  "1868",  "1870",  "1871",
    "1880",  "1882",  "1884",  "1885",  "1886",  "1888",  "1889",  "1890",  "1893",  "1894",  "1895",
    "1896",  "1897",  "1898",  "1899",  "1900",  "1901",  "1902",  "1903",  "1904",  "1905",  "1906",
    "1907",  "1908",  "1909",  "1910",  "1911",  "1912",  "1913",  "1914",  "1915",  "1916",  "1917",
    "1918",  "1919",  "1920",  "1921",  "1922",  "1923",  "1924",  "1925",  "1926",  "1927",  "1928",
    "1929",  "1930",  "1931",  "1932",  "1933",  "1934",  "1935",  "1936",  "1937",  "1938",  "1939",
    "1940",  "1941",  "1942",  "1943",  "1944",  "1945",  "1946",  "1947",  "1948",  "1949",  "1950",
    "1951",  "1952",  "1953",  "1954",  "1955",  "1956",  "1957",  "1958",  "1959",  "1960",  "1961",
    "1962",  "1963",  "1964",  "1965",  "1966",  "1967",  "1968",  "1969",  "1970",  "1971",  "1972",
    "1973",  "1974",  "1975",  "1976",  "1977",  "1978",  "1979",  "1980",  "1981",  "1982",  "1983",
    "1984",  "1985",  "1986",  "1987",  "1988",  "1989",  "1990",  "1991",  "1992",  "1993",  "1994",
    "1995",  "1996",  "1997",  "1998",  "1999",  "2000",  "2001",  "2002",  "2003",  "2004",  "2005",
    "2006",  "2007",  "2008",  "2009",  "2010",  "2011",  "2012",  "2013",  "2014",  "2015",  "2016",
    "2017",  "2018",  "2019",  "2020",  "2021",  "2022",  "2025",  "2030",  "2050",  "2100",  "2200",
    "2300",  "2345",  "2400",  "2500",  "2600",  "2700",  "2756",  "2765",  "2800",  "2900",  "3000",
    "3100",  "3200",  "3300",  "3400",  "3500",  "3600",  "3800",  "4000",  "4066",  "4200",  "4399",
    "4500",  "4600",  "4800",  "5000",  "5500",  "5757",  "6000",  "6221",  "6500",  "6606",  "6991",
    "7000",  "7500",  "7866",  "8000",  "8591",  "8891",  "9000",  "9595",  "9678",  "9985",  "10000",
    "12000", "12306", "12345", "15000", "15058", "18000", "20000", "25000", "30000", "50000", "123456"};
int main(int argc, char **argv) {
  // const	std::regex chinese("[a-z]");
  // const std::regex chinese("([a-z]+)\\.([a-z]+)");
  // const std::regex chinese(".*([\u4e00-\u9fff]+).*");
  // const std::regex chinese("([\u4e00-\u9fff]+)([a-z0-9]+)");

  std::cout << " usage: " << argv[0] << " [filepath]\n";
  std::vector<std::string> strings = {"abc中国123人 456", "就爱吃1是那就把1 a", "1232 db1 s", "阿迪达斯12",
                                      "阿迪达斯 12",      "阿迪达斯1a",         "阿迪达斯1",  "阿1",
                                      "爱 11 集",         "爱 12321 话"};
  if (argc == 2) {
    std::ifstream f(argv[1]);
    if (f) {
      std::string line;
      strings.clear();
      while (getline(f, line)) {
        strings.emplace_back(std::move(line));
      }
      std::cout << "read " << strings.size() << ",line from " << argv[1] << "\n";
    } else {
      std::cout << "open file error:" << argv[1] << "\n";
      return -1;
    }
  }

  try {
    // std::regex chinese("[\u4e00-\u9fff].*");

    // 	  regex_rule_1 = new
    // std::regex("^(第(_?)([0-9]|零|一|二|三|四|五|六|七|八|九|十|百|千|万){1,9}_(层|次|课|"
    //                               "集|颗|件|秒|代|套|届|期|区|季|批|单|粒|瓶|班|天|轮|届|杯|章|周|根|次|个|针"
    //                               "|条|台|中|排|堆|套|声|号|届|讲|种|期|枚|句|局|期|名|辆|碗|页|秒|分钟|小时|"
    //                               "周|天|代|次|块|件|回|站|场|只|任|份|名|层|卷))$");
    // regex_rule_2 = new std::regex("^([0-9]|零|一|二|三|四|五|六|七|八|九|十|百|千|万){1,9}_(块_钱)$");
    // regex_rule_3 = new std::regex("^([0-9]|零|一|二|三|四|五|六|七|八|九|十|百|千|万){1,9}_(平米)$");
    // regex_rule_4 = new std::regex("^(([0-9]|零|一|二|三|四|五|六|七|八|九|十|百|千|万){1,9}_(层|次|课|"
    //                               "集|颗|件|秒|代|套|届|期|区|季|批|单|粒|瓶|班|天|轮|届|杯|章|周|根|次|个|针"
    //                               "|条|台|中|排|堆|套|声|号|届|讲|种|期|枚|句|局|期|名|辆|碗|页|秒|分钟|小时|"
    //                               "周|天|代|次|块|件|回|站|场|只|任|份|名|层|卷|街|路|街道))$");
    std::smatch pieces_match;

    for (auto &s : strings) {
      std::cout << "====>" << s << "\n";
      bool all_ascii = true;
      for (int i = 0; i < s.size(); i++) {
        if (((uint16_t)s.at(i)) > 128) {
          all_ascii = false;
          break;
        }
      }
      if (all_ascii) {
        std::cout << "ascii match:" << s << "\n";
        continue;
      }
      if (std::regex_match(s, pieces_match, juji)) {
        std::cout << "may  match:" << s << ", ratio:" << (pieces_match[3].str().size() * 1.0f) / s.size()
                  << "\n";
        for (size_t i = 0; i < pieces_match.size(); ++i) {
          std::ssub_match sub_match = pieces_match[i];
          std::string piece = sub_match.str();
          std::cout << "  submatch " << i << ": " << piece << '\n';
        }
        if (pieces_match.size() != 4) {
          std::cout << "error:" << pieces_match.size();
        } else {
          if (pieces_match[1].str().size() > 0 && !recognize_number.count(pieces_match[1].str())) {
            std::cout << "hit match, last match:" << s << "\n";
          }else if(pieces_match[3].str().size()>0 && !recognize_number.count(pieces_match[3].str()) && (pieces_match[3].str().size()*1.0f)/s.size()>0.21){
            std::cout << "hit match, large match:" << s << "\n"; 
          }
        }
      } else {
        std::cout << "not match:" << s << "\n";
      }
    }
  } catch (const std::exception &e) {
    std::cout << e.what() << "\n";
  }

  return 0;
}